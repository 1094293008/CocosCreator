module.exports ="#ifdef GL_ES\n"
				+"precision mediump float;\n"
				+"#endif\n"
				+"\n"
				+"uniform float time;\n"
				+"uniform vec2 mouse_touch;\n"
				+"uniform vec2 resolution;\n"
				+"\n"
				+"void main( void ) {\n"
				+"\n"
				+"	vec2 p = (2.0*gl_FragCoord.xy-resolution.xy)/resolution.y;\n"
				+"    float tau = 3.1415926535;\n"
				+"    float a = sin(time);\n"
				+"    float r = length(p)*0.75;\n"
				+"    vec2 uv = vec2(a/tau,r);\n"
				+"	\n"
				+"	//get the color\n"
				+"	float xCol = (uv.x - (time / 3.0)) * 3.0;\n"
				+"	xCol = mod(xCol, 3.0);\n"
				+"	vec3 horColour = vec3(sin(time*2.99)*1.25, sin(time*3.111)*0.25, sin(time*1.31)*0.25);\n"
				+"	\n"
				+"	if (xCol < .1) {\n"
				+"		\n"
				+"		horColour.r += 1.0 - xCol;\n"
				+"		horColour.g += xCol;\n"
				+"	}\n"
				+"	else if (xCol < 0.4) {\n"
				+"		\n"
				+"		xCol -= 1.0;\n"
				+"		horColour.g += 1.0 - xCol;\n"
				+"		horColour.b += xCol;\n"
				+"	}\n"
				+"	else {\n"
				+"		\n"
				+"		xCol -= 2.0;\n"
				+"		horColour.b += 1.0 - xCol;\n"
				+"		horColour.r += xCol;\n"
				+"	}\n"
				+"\n"
				+"	// draw color beam\n"
				+"	uv = (3.0 * uv) - abs(sin(time));\n"
				+"	float beamWidth = .0+1.1*abs((sin(time)*0.2*2.0) / (3.0 * uv.x * uv.y));\n"
				+"	vec3 horBeam = vec3(beamWidth);\n"
				+"	gl_FragColor = vec4((( horBeam) * horColour), 1.0);\n"
				+"}\n"