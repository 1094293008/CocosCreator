module.exports = "#ifdef GL_ES\n" + "precision mediump float;\n" + "#endif\n" + "varying vec2 v_texCoord;\n" + "uniform float time;\n" + "uniform vec2 mouse_touch;\n" + "uniform vec2 resolution;\n" + "const float minRStart = -2.0;\n" + "const float maxRStart = 1.0;\n" + "const float minIStart = -1.0;\n" + "const float maxIStart = 1.0;\n" + "const int maxIterations = 50;\n" + "// Immaginary number: has a real and immaginary part\n" + "struct complexNumber\n" + "{\n" + "	float r;\n" + "	float i;\n" + "};\n" + "void main( void ) {\n" + "	float minR = minRStart; // change these in order to zoom\n" + "	float maxR = maxRStart;\n" + "	float minI = minIStart;\n" + "	float maxI = maxIStart;\n" + "	\n" + "	vec3 col = vec3(0,0,0);\n" + "	\n" + "	vec2 pos = gl_FragCoord.xy / resolution;\n" + "	\n" + "	// The complex number of the current pixel.\n" + "	complexNumber im;\n" + "	im.r = minR + (maxR-minR)*pos.x; // LERP within range\n" + "	im.i = minI + (maxI-minI)*pos.y;\n" + "	\n" + "	complexNumber z;\n" + "	z.r = im.r;\n" + "	z.i = im.i;\n" + "	\n" + "	bool def = true; // is the number (im) definite?\n" + "	int iterations = 0;\n" + "	for(int i = 0; i< maxIterations; i++)\n" + "	{\n" + "		if(sqrt(z.r*z.r + z.i*z.i) > 2.0) // abs(z) = distance from origo\n" + "		{\n" + "			def = false;\n" + "			iterations = i; \n" + "			break;\n" + "		}\n" + "		// Mandelbrot formula: zNew = zOld*zOld + im\n" + "		// z = (a+bi) => z*z = (a+bi)(a+bi) = a*a - b*b + 2abi\n" + "		complexNumber zSquared; \n" + "		zSquared.r = z.r*z.r - z.i*z.i; // real part: a*a - b*b\n" + "		zSquared.i = 2.0*z.r*z.i; // immaginary part: 2abi\n" + "		// add: rSquared + im -> simple: just add the real and immaginary parts\n" + "		z.r = zSquared.r + im.r; // add real parts\n" + "		z.i = zSquared.i + im.i; // add immaginary parts\n" + "	}\n" + "	if(def) // it is definite => colour it black\n" + "		col.rgb = vec3(0,0,0);\n" + "	else // the number grows to infinity => colour it by the number of iterations \n" + "	{\n" + "		float i = float(iterations)/float(maxIterations);\n" + "		col.r = smoothstep(0.0,0.5, i);\n" + "		col.g = smoothstep(0.0,1.0,i);\n" + "		col.b = smoothstep(0.3,1.0, i);\n" + "	}\n" + "	gl_FragColor.rgb = col;\n" + "}\n";